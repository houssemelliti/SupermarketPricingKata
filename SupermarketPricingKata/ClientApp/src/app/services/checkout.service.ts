/**
 * Supermarket Pricing Kata API
 * Visualize and interact with the API's resources
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from './encoder';

 import { Observable }                                        from 'rxjs';

 import { CheckoutItem } from '../models/CheckoutItem';

 import { BASE_PATH, COLLECTION_FORMATS }                     from './variables';
 import { Configuration }                                     from './configuration';
import { Checkout, Product, DiscountRule } from '../models/models';


 @Injectable()
 export class CheckoutService {

     protected basePath = 'api/checkout';
     public defaultHeaders = new HttpHeaders();
     public configuration = new Configuration();

     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }

     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }


     /**
      * Performs a HTTP POST request to add an item to the checkout list.
      *
      * @param body
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public addItemToCheckout(body?: CheckoutItem, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public addItemToCheckout(body?: CheckoutItem, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public addItemToCheckout(body?: CheckoutItem, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public addItemToCheckout(body?: CheckoutItem, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


         let headers = this.defaultHeaders;

         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }

         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }

         return this.httpClient.request<any>('post',`${this.basePath}/addToCart`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

     /**
      * Performs a HTTP GET request to get the Checkout object.
      *
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getCheckout(observe?: 'body', reportProgress?: boolean): Observable<any>;
     public getCheckout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public getCheckout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public getCheckout(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

         let headers = this.defaultHeaders;

         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }

         // to determine the Content-Type header
         const consumes: string[] = [
         ];

       return this.httpClient.request<Checkout>('get', `${this.basePath}/checkout`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

     /**
      * Performs a HTTP DELETE request to remove an item from the checkout.
      *
      * @param id checkout item identifier in the checkout list
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public deleteItemFromCheckout(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public deleteItemFromCheckout(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public deleteItemFromCheckout(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public deleteItemFromCheckout(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

         if (id === null || id === undefined) {
             throw new Error('Required parameter sku was null or undefined when calling deleteItemFromCheckout.');
         }

         let headers = this.defaultHeaders;

         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }

         // to determine the Content-Type header
         const consumes: string[] = [
         ];

         return this.httpClient.request<any>('delete',`${this.basePath}/deleteItem/${encodeURIComponent(String(id))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

     /**
      * Performs a HTTP GET request to get the list of available products.
      *
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getProducts(observe?: 'body', reportProgress?: boolean): Observable<any>;
     public getProducts(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public getProducts(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public getProducts(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

     let headers = this.defaultHeaders;

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
       headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<Product[]>('get',`${this.basePath}/products`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

     /**
      * Performs a HTTP GET request to get a product based on its stock keeping unit.
      *
      * @param sku
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getProduct(sku: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public getProduct(sku: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public getProduct(sku: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public getProduct(sku: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

         if (sku === null || sku === undefined) {
             throw new Error('Required parameter sku was null or undefined when calling getProduct.');
         }

         let headers = this.defaultHeaders;

         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }

         // to determine the Content-Type header
         const consumes: string[] = [
         ];

         return this.httpClient.request<Product>('get',`${this.basePath}/products/${encodeURIComponent(String(sku))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

   /**
     * Gets the list of discount rules through HTTP
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
   public getDiscountRules(observe?: 'body', reportProgress?: boolean): Observable<any>;
   public getDiscountRules(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
   public getDiscountRules(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
   public getDiscountRules(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

     let headers = this.defaultHeaders;

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
       headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<DiscountRule[]>('get', `${this.basePath}/discounts`,
       {
         withCredentials: this.configuration.withCredentials,
         headers: headers,
         observe: observe,
         reportProgress: reportProgress
       }
     );
   }

 }
